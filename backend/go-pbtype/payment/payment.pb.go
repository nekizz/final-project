// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: payment/payment.proto

package payment

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Payment struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PaymentType          string   `protobuf:"bytes,2,opt,name=payment_type,json=paymentType,proto3" json:"payment_type,omitempty"`
	PaymentDate          string   `protobuf:"bytes,3,opt,name=payment_date,json=paymentDate,proto3" json:"payment_date,omitempty"`
	PaymentStatus        string   `protobuf:"bytes,4,opt,name=payment_status,json=paymentStatus,proto3" json:"payment_status,omitempty"`
	Note                 string   `protobuf:"bytes,5,opt,name=note,proto3" json:"note,omitempty"`
	CreatedAt            string   `protobuf:"bytes,20,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            string   `protobuf:"bytes,21,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Payment) Reset()         { *m = Payment{} }
func (m *Payment) String() string { return proto.CompactTextString(m) }
func (*Payment) ProtoMessage()    {}
func (*Payment) Descriptor() ([]byte, []int) {
	return fileDescriptor_66a39aceed8019db, []int{0}
}
func (m *Payment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Payment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Payment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Payment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Payment.Merge(m, src)
}
func (m *Payment) XXX_Size() int {
	return m.Size()
}
func (m *Payment) XXX_DiscardUnknown() {
	xxx_messageInfo_Payment.DiscardUnknown(m)
}

var xxx_messageInfo_Payment proto.InternalMessageInfo

func (m *Payment) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Payment) GetPaymentType() string {
	if m != nil {
		return m.PaymentType
	}
	return ""
}

func (m *Payment) GetPaymentDate() string {
	if m != nil {
		return m.PaymentDate
	}
	return ""
}

func (m *Payment) GetPaymentStatus() string {
	if m != nil {
		return m.PaymentStatus
	}
	return ""
}

func (m *Payment) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

func (m *Payment) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Payment) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (*Payment) XXX_MessageName() string {
	return "payment.Payment"
}

type OnePaymentRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OnePaymentRequest) Reset()         { *m = OnePaymentRequest{} }
func (m *OnePaymentRequest) String() string { return proto.CompactTextString(m) }
func (*OnePaymentRequest) ProtoMessage()    {}
func (*OnePaymentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_66a39aceed8019db, []int{1}
}
func (m *OnePaymentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OnePaymentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OnePaymentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OnePaymentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OnePaymentRequest.Merge(m, src)
}
func (m *OnePaymentRequest) XXX_Size() int {
	return m.Size()
}
func (m *OnePaymentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OnePaymentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OnePaymentRequest proto.InternalMessageInfo

func (m *OnePaymentRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (*OnePaymentRequest) XXX_MessageName() string {
	return "payment.OnePaymentRequest"
}

type ListPaymentRequest struct {
	Page                 uint32   `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Limit                uint32   `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	CreatedAtMin         string   `protobuf:"bytes,5,opt,name=created_at_min,json=createdAtMin,proto3" json:"created_at_min,omitempty"`
	CreatedAtMax         string   `protobuf:"bytes,6,opt,name=created_at_max,json=createdAtMax,proto3" json:"created_at_max,omitempty"`
	SearchField          string   `protobuf:"bytes,7,opt,name=search_field,json=searchField,proto3" json:"search_field,omitempty"`
	SearchValue          string   `protobuf:"bytes,8,opt,name=search_value,json=searchValue,proto3" json:"search_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListPaymentRequest) Reset()         { *m = ListPaymentRequest{} }
func (m *ListPaymentRequest) String() string { return proto.CompactTextString(m) }
func (*ListPaymentRequest) ProtoMessage()    {}
func (*ListPaymentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_66a39aceed8019db, []int{2}
}
func (m *ListPaymentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListPaymentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListPaymentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListPaymentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPaymentRequest.Merge(m, src)
}
func (m *ListPaymentRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListPaymentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPaymentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListPaymentRequest proto.InternalMessageInfo

func (m *ListPaymentRequest) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListPaymentRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListPaymentRequest) GetCreatedAtMin() string {
	if m != nil {
		return m.CreatedAtMin
	}
	return ""
}

func (m *ListPaymentRequest) GetCreatedAtMax() string {
	if m != nil {
		return m.CreatedAtMax
	}
	return ""
}

func (m *ListPaymentRequest) GetSearchField() string {
	if m != nil {
		return m.SearchField
	}
	return ""
}

func (m *ListPaymentRequest) GetSearchValue() string {
	if m != nil {
		return m.SearchValue
	}
	return ""
}

func (*ListPaymentRequest) XXX_MessageName() string {
	return "payment.ListPaymentRequest"
}

type ListPaymentResponse struct {
	Items                []*Payment `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	MaxPage              uint32     `protobuf:"varint,2,opt,name=max_page,json=maxPage,proto3" json:"max_page,omitempty"`
	TotalCount           uint32     `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	Page                 uint32     `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	Limit                uint32     `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	SearchField          string     `protobuf:"bytes,6,opt,name=search_field,json=searchField,proto3" json:"search_field,omitempty"`
	SearchValue          string     `protobuf:"bytes,7,opt,name=search_value,json=searchValue,proto3" json:"search_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ListPaymentResponse) Reset()         { *m = ListPaymentResponse{} }
func (m *ListPaymentResponse) String() string { return proto.CompactTextString(m) }
func (*ListPaymentResponse) ProtoMessage()    {}
func (*ListPaymentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_66a39aceed8019db, []int{3}
}
func (m *ListPaymentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListPaymentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListPaymentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListPaymentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPaymentResponse.Merge(m, src)
}
func (m *ListPaymentResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListPaymentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPaymentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListPaymentResponse proto.InternalMessageInfo

func (m *ListPaymentResponse) GetItems() []*Payment {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ListPaymentResponse) GetMaxPage() uint32 {
	if m != nil {
		return m.MaxPage
	}
	return 0
}

func (m *ListPaymentResponse) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *ListPaymentResponse) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListPaymentResponse) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListPaymentResponse) GetSearchField() string {
	if m != nil {
		return m.SearchField
	}
	return ""
}

func (m *ListPaymentResponse) GetSearchValue() string {
	if m != nil {
		return m.SearchValue
	}
	return ""
}

func (*ListPaymentResponse) XXX_MessageName() string {
	return "payment.ListPaymentResponse"
}
func init() {
	proto.RegisterType((*Payment)(nil), "payment.Payment")
	golang_proto.RegisterType((*Payment)(nil), "payment.Payment")
	proto.RegisterType((*OnePaymentRequest)(nil), "payment.OnePaymentRequest")
	golang_proto.RegisterType((*OnePaymentRequest)(nil), "payment.OnePaymentRequest")
	proto.RegisterType((*ListPaymentRequest)(nil), "payment.ListPaymentRequest")
	golang_proto.RegisterType((*ListPaymentRequest)(nil), "payment.ListPaymentRequest")
	proto.RegisterType((*ListPaymentResponse)(nil), "payment.ListPaymentResponse")
	golang_proto.RegisterType((*ListPaymentResponse)(nil), "payment.ListPaymentResponse")
}

func init() { proto.RegisterFile("payment/payment.proto", fileDescriptor_66a39aceed8019db) }
func init() { golang_proto.RegisterFile("payment/payment.proto", fileDescriptor_66a39aceed8019db) }

var fileDescriptor_66a39aceed8019db = []byte{
	// 640 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x4d, 0x4f, 0x14, 0x41,
	0x10, 0xcd, 0xec, 0x27, 0xf4, 0xb2, 0xab, 0x34, 0x60, 0xc6, 0x05, 0x57, 0x1c, 0x3f, 0x42, 0x48,
	0xd8, 0x49, 0xf0, 0xa4, 0x37, 0x04, 0x31, 0x31, 0x1a, 0xc8, 0x82, 0x1e, 0xbc, 0x6c, 0x7a, 0x67,
	0x8a, 0xa1, 0x65, 0xa6, 0x7b, 0xdc, 0xa9, 0x21, 0xbb, 0x18, 0x2f, 0xfe, 0x04, 0xfd, 0x43, 0x1e,
	0x39, 0x92, 0x78, 0xf1, 0x68, 0xc0, 0x8b, 0xff, 0xc2, 0x4c, 0x4f, 0xcf, 0xb2, 0x5f, 0x51, 0x4f,
	0x74, 0xbf, 0xf7, 0xfa, 0x4d, 0xbd, 0xa2, 0xb6, 0xc8, 0x52, 0xc8, 0xfa, 0x01, 0x08, 0xb4, 0xf5,
	0xdf, 0x66, 0xd8, 0x95, 0x28, 0x69, 0x59, 0x5f, 0xeb, 0x1b, 0x1e, 0xc7, 0xe3, 0xb8, 0xd3, 0x74,
	0x64, 0x60, 0x7b, 0xd2, 0x93, 0xb6, 0xe2, 0x3b, 0xf1, 0x91, 0xba, 0xa9, 0x8b, 0x3a, 0xa5, 0xef,
	0xea, 0xcb, 0x9e, 0x94, 0x9e, 0x0f, 0xd7, 0x2a, 0x08, 0x42, 0xec, 0x6b, 0x72, 0x45, 0x93, 0x2c,
	0xe4, 0x36, 0x13, 0x42, 0x22, 0x43, 0x2e, 0x45, 0x94, 0xb2, 0xd6, 0x0f, 0x83, 0x94, 0xf7, 0xd3,
	0xaf, 0xd2, 0x1a, 0xc9, 0x71, 0xd7, 0x34, 0x56, 0x8d, 0xb5, 0xd9, 0x56, 0x8e, 0xbb, 0xf4, 0x1e,
	0x99, 0xd3, 0x05, 0xb5, 0xb1, 0x1f, 0x82, 0x99, 0x53, 0x4c, 0x45, 0x63, 0x87, 0xfd, 0x10, 0x86,
	0x25, 0x2e, 0x43, 0x30, 0xf3, 0x23, 0x92, 0x1d, 0x86, 0x40, 0x1f, 0x92, 0x5a, 0x26, 0x89, 0x90,
	0x61, 0x1c, 0x99, 0x05, 0x25, 0xaa, 0x6a, 0xf4, 0x40, 0x81, 0x94, 0x92, 0x82, 0x90, 0x08, 0x66,
	0x51, 0x91, 0xea, 0x4c, 0xef, 0x10, 0xe2, 0x74, 0x81, 0x21, 0xb8, 0x6d, 0x86, 0xe6, 0xa2, 0x62,
	0x66, 0x35, 0xb2, 0x85, 0x09, 0x1d, 0x87, 0x6e, 0x46, 0x2f, 0xa5, 0xb4, 0x46, 0xb6, 0xd0, 0xba,
	0x4f, 0xe6, 0xf7, 0x04, 0xe8, 0x70, 0x2d, 0xf8, 0x10, 0x43, 0x34, 0x91, 0xd1, 0xba, 0x30, 0x08,
	0x7d, 0xc5, 0x23, 0x1c, 0x93, 0x51, 0x52, 0x08, 0x99, 0x97, 0xe6, 0xa9, 0xb6, 0xd4, 0x99, 0x2e,
	0x92, 0xa2, 0xcf, 0x03, 0x8e, 0xaa, 0xfe, 0x6a, 0x2b, 0xbd, 0xd0, 0x07, 0xa4, 0x76, 0x5d, 0x63,
	0x3b, 0xe0, 0x42, 0x27, 0x98, 0x1b, 0xd4, 0xf9, 0x9a, 0x8b, 0x71, 0x15, 0xeb, 0x99, 0xa5, 0x71,
	0x15, 0xeb, 0x25, 0xdd, 0x8c, 0x80, 0x75, 0x9d, 0xe3, 0xf6, 0x11, 0x07, 0xdf, 0x35, 0xcb, 0x69,
	0x37, 0x53, 0x6c, 0x37, 0x81, 0x86, 0x24, 0xa7, 0xcc, 0x8f, 0xc1, 0x9c, 0x19, 0x96, 0xbc, 0x4d,
	0x20, 0xeb, 0xb7, 0x41, 0x16, 0x46, 0x22, 0x45, 0xa1, 0x14, 0x11, 0xd0, 0x47, 0xa4, 0xc8, 0x11,
	0x82, 0xc8, 0x34, 0x56, 0xf3, 0x6b, 0x95, 0xcd, 0x9b, 0xcd, 0x6c, 0xf8, 0x32, 0x61, 0x4a, 0xd3,
	0xdb, 0x64, 0x26, 0x60, 0xbd, 0xb6, 0xca, 0x9f, 0x53, 0x51, 0xcb, 0x01, 0xeb, 0xed, 0x27, 0x2d,
	0xb8, 0x4b, 0x2a, 0x28, 0x91, 0xf9, 0x6d, 0x47, 0xc6, 0x02, 0x75, 0x77, 0x88, 0x82, 0xb6, 0x13,
	0x64, 0xd0, 0xb7, 0xc2, 0xb4, 0xbe, 0x15, 0x87, 0xfb, 0x36, 0x9e, 0xb5, 0xf4, 0xef, 0xac, 0xe5,
	0x89, 0xac, 0x9b, 0x5f, 0xf2, 0xa4, 0xa6, 0xcb, 0x3f, 0x80, 0xee, 0x29, 0x77, 0x80, 0x6e, 0x91,
	0xd2, 0xb6, 0x6a, 0x2a, 0x9d, 0x48, 0x58, 0x9f, 0x40, 0xac, 0x85, 0xcf, 0xdf, 0x7f, 0x7d, 0xcd,
	0x55, 0xad, 0x99, 0xec, 0xa7, 0xf8, 0xd4, 0x58, 0xa7, 0xbb, 0xa4, 0xf4, 0x46, 0x8d, 0xd1, 0x7f,
	0x59, 0x98, 0xca, 0x82, 0xd6, 0xab, 0x99, 0x85, 0xfd, 0x91, 0xbb, 0x9f, 0x12, 0x9f, 0x97, 0x24,
	0xff, 0x02, 0x90, 0xd6, 0x07, 0x4f, 0x26, 0xe6, 0x71, 0x8a, 0xdd, 0x92, 0xb2, 0xbb, 0x41, 0x47,
	0xed, 0xe8, 0x21, 0x29, 0x24, 0xff, 0x54, 0xba, 0x3c, 0x78, 0x30, 0x39, 0xb6, 0xf5, 0x95, 0xe9,
	0x64, 0x3a, 0x00, 0xd6, 0xbc, 0x72, 0xae, 0xd0, 0xd9, 0xcc, 0x39, 0xa2, 0x07, 0xa4, 0xb4, 0x03,
	0x3e, 0x20, 0xfc, 0xb5, 0xc8, 0x5b, 0xcd, 0x74, 0x87, 0x34, 0xb3, 0x05, 0xd3, 0x7c, 0x9e, 0x2c,
	0x98, 0xac, 0xd4, 0xf5, 0xd1, 0x52, 0x9f, 0xed, 0x9d, 0x5f, 0x36, 0x8c, 0x8b, 0xcb, 0x86, 0xf1,
	0xf3, 0xb2, 0x61, 0x7c, 0xbb, 0x6a, 0x18, 0xe7, 0x57, 0x0d, 0xe3, 0xdd, 0x93, 0xa1, 0x9d, 0x26,
	0xe0, 0x84, 0x9f, 0x9d, 0xd9, 0x47, 0x5c, 0x30, 0x7f, 0x23, 0xec, 0xca, 0xf7, 0xe0, 0xa0, 0xdd,
	0x61, 0xce, 0x09, 0x08, 0xd7, 0xf6, 0xe4, 0x46, 0xd8, 0x49, 0x16, 0x4e, 0xe6, 0xda, 0x29, 0xa9,
	0xef, 0x3e, 0xfe, 0x13, 0x00, 0x00, 0xff, 0xff, 0x84, 0xd1, 0xfb, 0x9c, 0x37, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PaymentServiceClient is the client API for PaymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PaymentServiceClient interface {
	Create(ctx context.Context, in *Payment, opts ...grpc.CallOption) (*Payment, error)
	Update(ctx context.Context, in *Payment, opts ...grpc.CallOption) (*Payment, error)
	Get(ctx context.Context, in *OnePaymentRequest, opts ...grpc.CallOption) (*Payment, error)
	List(ctx context.Context, in *ListPaymentRequest, opts ...grpc.CallOption) (*ListPaymentResponse, error)
	Delete(ctx context.Context, in *OnePaymentRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type paymentServiceClient struct {
	cc *grpc.ClientConn
}

func NewPaymentServiceClient(cc *grpc.ClientConn) PaymentServiceClient {
	return &paymentServiceClient{cc}
}

func (c *paymentServiceClient) Create(ctx context.Context, in *Payment, opts ...grpc.CallOption) (*Payment, error) {
	out := new(Payment)
	err := c.cc.Invoke(ctx, "/payment.PaymentService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) Update(ctx context.Context, in *Payment, opts ...grpc.CallOption) (*Payment, error) {
	out := new(Payment)
	err := c.cc.Invoke(ctx, "/payment.PaymentService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) Get(ctx context.Context, in *OnePaymentRequest, opts ...grpc.CallOption) (*Payment, error) {
	out := new(Payment)
	err := c.cc.Invoke(ctx, "/payment.PaymentService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) List(ctx context.Context, in *ListPaymentRequest, opts ...grpc.CallOption) (*ListPaymentResponse, error) {
	out := new(ListPaymentResponse)
	err := c.cc.Invoke(ctx, "/payment.PaymentService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) Delete(ctx context.Context, in *OnePaymentRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/payment.PaymentService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentServiceServer is the server API for PaymentService service.
type PaymentServiceServer interface {
	Create(context.Context, *Payment) (*Payment, error)
	Update(context.Context, *Payment) (*Payment, error)
	Get(context.Context, *OnePaymentRequest) (*Payment, error)
	List(context.Context, *ListPaymentRequest) (*ListPaymentResponse, error)
	Delete(context.Context, *OnePaymentRequest) (*types.Empty, error)
}

// UnimplementedPaymentServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPaymentServiceServer struct {
}

func (*UnimplementedPaymentServiceServer) Create(ctx context.Context, req *Payment) (*Payment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedPaymentServiceServer) Update(ctx context.Context, req *Payment) (*Payment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedPaymentServiceServer) Get(ctx context.Context, req *OnePaymentRequest) (*Payment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedPaymentServiceServer) List(ctx context.Context, req *ListPaymentRequest) (*ListPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedPaymentServiceServer) Delete(ctx context.Context, req *OnePaymentRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterPaymentServiceServer(s *grpc.Server, srv PaymentServiceServer) {
	s.RegisterService(&_PaymentService_serviceDesc, srv)
}

func _PaymentService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Payment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).Create(ctx, req.(*Payment))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Payment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).Update(ctx, req.(*Payment))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).Get(ctx, req.(*OnePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).List(ctx, req.(*ListPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).Delete(ctx, req.(*OnePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PaymentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "payment.PaymentService",
	HandlerType: (*PaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _PaymentService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PaymentService_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _PaymentService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _PaymentService_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PaymentService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment/payment.proto",
}

func (m *Payment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Payment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Payment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.Note) > 0 {
		i -= len(m.Note)
		copy(dAtA[i:], m.Note)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.Note)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PaymentStatus) > 0 {
		i -= len(m.PaymentStatus)
		copy(dAtA[i:], m.PaymentStatus)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.PaymentStatus)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PaymentDate) > 0 {
		i -= len(m.PaymentDate)
		copy(dAtA[i:], m.PaymentDate)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.PaymentDate)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PaymentType) > 0 {
		i -= len(m.PaymentType)
		copy(dAtA[i:], m.PaymentType)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.PaymentType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OnePaymentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OnePaymentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OnePaymentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListPaymentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListPaymentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListPaymentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SearchValue) > 0 {
		i -= len(m.SearchValue)
		copy(dAtA[i:], m.SearchValue)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.SearchValue)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.SearchField) > 0 {
		i -= len(m.SearchField)
		copy(dAtA[i:], m.SearchField)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.SearchField)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CreatedAtMax) > 0 {
		i -= len(m.CreatedAtMax)
		copy(dAtA[i:], m.CreatedAtMax)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.CreatedAtMax)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CreatedAtMin) > 0 {
		i -= len(m.CreatedAtMin)
		copy(dAtA[i:], m.CreatedAtMin)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.CreatedAtMin)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Limit != 0 {
		i = encodeVarintPayment(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x20
	}
	if m.Page != 0 {
		i = encodeVarintPayment(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x18
	}
	return len(dAtA) - i, nil
}

func (m *ListPaymentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListPaymentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListPaymentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SearchValue) > 0 {
		i -= len(m.SearchValue)
		copy(dAtA[i:], m.SearchValue)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.SearchValue)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SearchField) > 0 {
		i -= len(m.SearchField)
		copy(dAtA[i:], m.SearchField)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.SearchField)))
		i--
		dAtA[i] = 0x32
	}
	if m.Limit != 0 {
		i = encodeVarintPayment(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x28
	}
	if m.Page != 0 {
		i = encodeVarintPayment(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x20
	}
	if m.TotalCount != 0 {
		i = encodeVarintPayment(dAtA, i, uint64(m.TotalCount))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxPage != 0 {
		i = encodeVarintPayment(dAtA, i, uint64(m.MaxPage))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPayment(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintPayment(dAtA []byte, offset int, v uint64) int {
	offset -= sovPayment(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Payment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.PaymentType)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.PaymentDate)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.PaymentStatus)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.Note)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 2 + l + sovPayment(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 2 + l + sovPayment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OnePaymentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListPaymentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovPayment(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovPayment(uint64(m.Limit))
	}
	l = len(m.CreatedAtMin)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.CreatedAtMax)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.SearchField)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.SearchValue)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListPaymentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovPayment(uint64(l))
		}
	}
	if m.MaxPage != 0 {
		n += 1 + sovPayment(uint64(m.MaxPage))
	}
	if m.TotalCount != 0 {
		n += 1 + sovPayment(uint64(m.TotalCount))
	}
	if m.Page != 0 {
		n += 1 + sovPayment(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovPayment(uint64(m.Limit))
	}
	l = len(m.SearchField)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	l = len(m.SearchValue)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPayment(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPayment(x uint64) (n int) {
	return sovPayment(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Payment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Payment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Payment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Note = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPayment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OnePaymentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OnePaymentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OnePaymentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPayment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListPaymentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListPaymentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListPaymentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAtMin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAtMin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAtMax", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAtMax = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchField", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SearchField = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SearchValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPayment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListPaymentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListPaymentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListPaymentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Payment{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPage", wireType)
			}
			m.MaxPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPage |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchField", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SearchField = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SearchValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPayment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPayment(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPayment
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPayment
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPayment
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPayment        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPayment          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPayment = fmt.Errorf("proto: unexpected end of group")
)
