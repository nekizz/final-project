// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: booked-room/booked-room.proto

package booked_room

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BookedRoom struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Checkin              string   `protobuf:"bytes,2,opt,name=checkin,proto3" json:"checkin,omitempty"`
	Checkout             string   `protobuf:"bytes,3,opt,name=checkout,proto3" json:"checkout,omitempty"`
	Price                float32  `protobuf:"fixed32,4,opt,name=price,proto3" json:"price,omitempty"`
	Discount             float32  `protobuf:"fixed32,5,opt,name=discount,proto3" json:"discount,omitempty"`
	IsCheckin            bool     `protobuf:"varint,6,opt,name=is_checkin,json=isCheckin,proto3" json:"is_checkin,omitempty"`
	BookingId            string   `protobuf:"bytes,7,opt,name=booking_id,json=bookingId,proto3" json:"booking_id,omitempty"`
	RoomId               string   `protobuf:"bytes,8,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	CreatedAt            string   `protobuf:"bytes,20,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            string   `protobuf:"bytes,21,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BookedRoom) Reset()         { *m = BookedRoom{} }
func (m *BookedRoom) String() string { return proto.CompactTextString(m) }
func (*BookedRoom) ProtoMessage()    {}
func (*BookedRoom) Descriptor() ([]byte, []int) {
	return fileDescriptor_12c094f06008f7cd, []int{0}
}
func (m *BookedRoom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BookedRoom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BookedRoom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BookedRoom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BookedRoom.Merge(m, src)
}
func (m *BookedRoom) XXX_Size() int {
	return m.Size()
}
func (m *BookedRoom) XXX_DiscardUnknown() {
	xxx_messageInfo_BookedRoom.DiscardUnknown(m)
}

var xxx_messageInfo_BookedRoom proto.InternalMessageInfo

func (m *BookedRoom) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BookedRoom) GetCheckin() string {
	if m != nil {
		return m.Checkin
	}
	return ""
}

func (m *BookedRoom) GetCheckout() string {
	if m != nil {
		return m.Checkout
	}
	return ""
}

func (m *BookedRoom) GetPrice() float32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *BookedRoom) GetDiscount() float32 {
	if m != nil {
		return m.Discount
	}
	return 0
}

func (m *BookedRoom) GetIsCheckin() bool {
	if m != nil {
		return m.IsCheckin
	}
	return false
}

func (m *BookedRoom) GetBookingId() string {
	if m != nil {
		return m.BookingId
	}
	return ""
}

func (m *BookedRoom) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

func (m *BookedRoom) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *BookedRoom) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (*BookedRoom) XXX_MessageName() string {
	return "bookedroom.BookedRoom"
}

type OneBookedRoomRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OneBookedRoomRequest) Reset()         { *m = OneBookedRoomRequest{} }
func (m *OneBookedRoomRequest) String() string { return proto.CompactTextString(m) }
func (*OneBookedRoomRequest) ProtoMessage()    {}
func (*OneBookedRoomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_12c094f06008f7cd, []int{1}
}
func (m *OneBookedRoomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OneBookedRoomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OneBookedRoomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OneBookedRoomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OneBookedRoomRequest.Merge(m, src)
}
func (m *OneBookedRoomRequest) XXX_Size() int {
	return m.Size()
}
func (m *OneBookedRoomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OneBookedRoomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OneBookedRoomRequest proto.InternalMessageInfo

func (m *OneBookedRoomRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (*OneBookedRoomRequest) XXX_MessageName() string {
	return "bookedroom.OneBookedRoomRequest"
}

type ListBookedRoomRequest struct {
	Page                 uint32   `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Limit                uint32   `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	CreatedAtMin         string   `protobuf:"bytes,5,opt,name=created_at_min,json=createdAtMin,proto3" json:"created_at_min,omitempty"`
	CreatedAtMax         string   `protobuf:"bytes,6,opt,name=created_at_max,json=createdAtMax,proto3" json:"created_at_max,omitempty"`
	SearchField          string   `protobuf:"bytes,7,opt,name=search_field,json=searchField,proto3" json:"search_field,omitempty"`
	SearchValue          string   `protobuf:"bytes,8,opt,name=search_value,json=searchValue,proto3" json:"search_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListBookedRoomRequest) Reset()         { *m = ListBookedRoomRequest{} }
func (m *ListBookedRoomRequest) String() string { return proto.CompactTextString(m) }
func (*ListBookedRoomRequest) ProtoMessage()    {}
func (*ListBookedRoomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_12c094f06008f7cd, []int{2}
}
func (m *ListBookedRoomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListBookedRoomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListBookedRoomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListBookedRoomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBookedRoomRequest.Merge(m, src)
}
func (m *ListBookedRoomRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListBookedRoomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBookedRoomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListBookedRoomRequest proto.InternalMessageInfo

func (m *ListBookedRoomRequest) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListBookedRoomRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListBookedRoomRequest) GetCreatedAtMin() string {
	if m != nil {
		return m.CreatedAtMin
	}
	return ""
}

func (m *ListBookedRoomRequest) GetCreatedAtMax() string {
	if m != nil {
		return m.CreatedAtMax
	}
	return ""
}

func (m *ListBookedRoomRequest) GetSearchField() string {
	if m != nil {
		return m.SearchField
	}
	return ""
}

func (m *ListBookedRoomRequest) GetSearchValue() string {
	if m != nil {
		return m.SearchValue
	}
	return ""
}

func (*ListBookedRoomRequest) XXX_MessageName() string {
	return "bookedroom.ListBookedRoomRequest"
}

type ListBookedRoomResponse struct {
	Items                []*BookedRoom `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	MaxPage              uint32        `protobuf:"varint,2,opt,name=max_page,json=maxPage,proto3" json:"max_page,omitempty"`
	TotalCount           uint32        `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	Page                 uint32        `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	Limit                uint32        `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	SearchField          string        `protobuf:"bytes,6,opt,name=search_field,json=searchField,proto3" json:"search_field,omitempty"`
	SearchValue          string        `protobuf:"bytes,7,opt,name=search_value,json=searchValue,proto3" json:"search_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ListBookedRoomResponse) Reset()         { *m = ListBookedRoomResponse{} }
func (m *ListBookedRoomResponse) String() string { return proto.CompactTextString(m) }
func (*ListBookedRoomResponse) ProtoMessage()    {}
func (*ListBookedRoomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_12c094f06008f7cd, []int{3}
}
func (m *ListBookedRoomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListBookedRoomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListBookedRoomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListBookedRoomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBookedRoomResponse.Merge(m, src)
}
func (m *ListBookedRoomResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListBookedRoomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBookedRoomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListBookedRoomResponse proto.InternalMessageInfo

func (m *ListBookedRoomResponse) GetItems() []*BookedRoom {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ListBookedRoomResponse) GetMaxPage() uint32 {
	if m != nil {
		return m.MaxPage
	}
	return 0
}

func (m *ListBookedRoomResponse) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *ListBookedRoomResponse) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListBookedRoomResponse) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListBookedRoomResponse) GetSearchField() string {
	if m != nil {
		return m.SearchField
	}
	return ""
}

func (m *ListBookedRoomResponse) GetSearchValue() string {
	if m != nil {
		return m.SearchValue
	}
	return ""
}

func (*ListBookedRoomResponse) XXX_MessageName() string {
	return "bookedroom.ListBookedRoomResponse"
}
func init() {
	proto.RegisterType((*BookedRoom)(nil), "bookedroom.BookedRoom")
	golang_proto.RegisterType((*BookedRoom)(nil), "bookedroom.BookedRoom")
	proto.RegisterType((*OneBookedRoomRequest)(nil), "bookedroom.OneBookedRoomRequest")
	golang_proto.RegisterType((*OneBookedRoomRequest)(nil), "bookedroom.OneBookedRoomRequest")
	proto.RegisterType((*ListBookedRoomRequest)(nil), "bookedroom.ListBookedRoomRequest")
	golang_proto.RegisterType((*ListBookedRoomRequest)(nil), "bookedroom.ListBookedRoomRequest")
	proto.RegisterType((*ListBookedRoomResponse)(nil), "bookedroom.ListBookedRoomResponse")
	golang_proto.RegisterType((*ListBookedRoomResponse)(nil), "bookedroom.ListBookedRoomResponse")
}

func init() { proto.RegisterFile("booked-room/booked-room.proto", fileDescriptor_12c094f06008f7cd) }
func init() {
	golang_proto.RegisterFile("booked-room/booked-room.proto", fileDescriptor_12c094f06008f7cd)
}

var fileDescriptor_12c094f06008f7cd = []byte{
	// 693 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xdd, 0x6a, 0x13, 0x41,
	0x14, 0x66, 0xf3, 0x9f, 0x93, 0xb6, 0x94, 0x21, 0xad, 0x6b, 0x6a, 0x63, 0xba, 0x88, 0x84, 0x62,
	0xb2, 0x50, 0xef, 0x04, 0x2f, 0xda, 0xfa, 0x43, 0x41, 0xb1, 0x6c, 0xa9, 0xa0, 0x08, 0x61, 0xb2,
	0x3b, 0xdd, 0x8e, 0xd9, 0xdd, 0x59, 0xb3, 0x93, 0x92, 0x56, 0xbc, 0xf1, 0x15, 0xbc, 0xf2, 0x6d,
	0xbc, 0xec, 0xa5, 0x50, 0x1f, 0x40, 0x5a, 0x9f, 0xc0, 0x27, 0x90, 0x39, 0xbb, 0xdb, 0xac, 0x49,
	0xeb, 0xcf, 0xdd, 0x9c, 0xef, 0xfb, 0xce, 0x39, 0x73, 0x3e, 0x0e, 0x07, 0x56, 0xfb, 0x42, 0x0c,
	0x98, 0xd3, 0x19, 0x0a, 0xe1, 0x9b, 0x99, 0x77, 0x37, 0x1c, 0x0a, 0x29, 0x08, 0xc4, 0x90, 0x42,
	0x1a, 0x1d, 0x97, 0xcb, 0xc3, 0x51, 0xbf, 0x6b, 0x0b, 0xdf, 0x74, 0x85, 0x2b, 0x4c, 0x94, 0xf4,
	0x47, 0x07, 0x18, 0x61, 0x80, 0xaf, 0x38, 0xb5, 0xb1, 0xe2, 0x0a, 0xe1, 0x7a, 0x6c, 0xa2, 0x62,
	0x7e, 0x28, 0x8f, 0x13, 0xf2, 0x56, 0x42, 0xd2, 0x90, 0x9b, 0x34, 0x08, 0x84, 0xa4, 0x92, 0x8b,
	0x20, 0x8a, 0x59, 0xe3, 0x73, 0x0e, 0x60, 0x0b, 0x1b, 0x5b, 0x42, 0xf8, 0x64, 0x01, 0x72, 0xdc,
	0xd1, 0xb5, 0x96, 0xd6, 0xae, 0x5a, 0x39, 0xee, 0x10, 0x1d, 0xca, 0xf6, 0x21, 0xb3, 0x07, 0x3c,
	0xd0, 0x73, 0x08, 0xa6, 0x21, 0x69, 0x40, 0x05, 0x9f, 0x62, 0x24, 0xf5, 0x3c, 0x52, 0x97, 0x31,
	0xa9, 0x43, 0x31, 0x1c, 0x72, 0x9b, 0xe9, 0x85, 0x96, 0xd6, 0xce, 0x59, 0x71, 0xa0, 0x32, 0x1c,
	0x1e, 0xd9, 0x62, 0x14, 0x48, 0xbd, 0x88, 0xc4, 0x65, 0x4c, 0x56, 0x01, 0x78, 0xd4, 0x4b, 0x5b,
	0x95, 0x5a, 0x5a, 0xbb, 0x62, 0x55, 0x79, 0xb4, 0x9d, 0x34, 0x5b, 0x05, 0x74, 0x87, 0x07, 0x6e,
	0x8f, 0x3b, 0x7a, 0x19, 0xdb, 0x55, 0x13, 0x64, 0xc7, 0x21, 0x37, 0xa0, 0xac, 0x6c, 0x53, 0x5c,
	0x05, 0xb9, 0x92, 0x0a, 0x77, 0x1c, 0x95, 0x67, 0x0f, 0x19, 0x95, 0xcc, 0xe9, 0x51, 0xa9, 0xd7,
	0xe3, 0xbc, 0x04, 0xd9, 0xc4, 0xae, 0xa3, 0xd0, 0x49, 0xe9, 0xa5, 0x98, 0x4e, 0x90, 0x4d, 0x69,
	0xdc, 0x85, 0xfa, 0x8b, 0x80, 0x4d, 0xdc, 0xb1, 0xd8, 0xbb, 0x11, 0x8b, 0xe4, 0xb4, 0x49, 0xc6,
	0x99, 0x06, 0x4b, 0xcf, 0x78, 0x24, 0x67, 0x95, 0x04, 0x0a, 0x21, 0x75, 0x19, 0x1a, 0x34, 0x6f,
	0xe1, 0x5b, 0x99, 0xe3, 0x71, 0x9f, 0x4b, 0x34, 0x67, 0xde, 0x8a, 0x03, 0x72, 0x07, 0x16, 0x26,
	0x3f, 0xed, 0xf9, 0x3c, 0x40, 0x8b, 0xaa, 0xd6, 0xdc, 0xe5, 0x6f, 0x9f, 0xf3, 0x60, 0x5a, 0x45,
	0xc7, 0x68, 0xd5, 0x6f, 0x2a, 0x3a, 0x26, 0x6b, 0x30, 0x17, 0x31, 0x3a, 0xb4, 0x0f, 0x7b, 0x07,
	0x9c, 0x79, 0xa9, 0x5f, 0xb5, 0x18, 0x7b, 0xa2, 0xa0, 0x8c, 0xe4, 0x88, 0x7a, 0x23, 0x96, 0xd8,
	0x96, 0x48, 0x5e, 0x2a, 0xc8, 0xf8, 0xa9, 0xc1, 0xf2, 0xf4, 0x54, 0x51, 0x28, 0x82, 0x88, 0x91,
	0x7b, 0x50, 0xe4, 0x92, 0xf9, 0x91, 0xae, 0xb5, 0xf2, 0xed, 0xda, 0xc6, 0x72, 0x77, 0xb2, 0xba,
	0xdd, 0x8c, 0x3c, 0x16, 0x91, 0x9b, 0x50, 0xf1, 0xe9, 0xb8, 0x87, 0x46, 0xe4, 0x70, 0xe6, 0xb2,
	0x4f, 0xc7, 0xbb, 0xca, 0x8b, 0xdb, 0x50, 0x93, 0x42, 0x52, 0xaf, 0x17, 0x6f, 0x45, 0x6c, 0x13,
	0x20, 0xb4, 0x8d, 0x7b, 0x91, 0x1a, 0x58, 0xb8, 0xca, 0xc0, 0x62, 0xd6, 0xc0, 0xe9, 0xa1, 0x4b,
	0x7f, 0x1f, 0xba, 0x3c, 0x33, 0xf4, 0xc6, 0xb7, 0x3c, 0xd4, 0xb6, 0xb8, 0xe7, 0xed, 0xb1, 0xe1,
	0x91, 0xda, 0xd9, 0x5d, 0x28, 0x6d, 0xa3, 0xb5, 0xe4, 0x9a, 0x21, 0x1b, 0xd7, 0xe0, 0xc6, 0xf2,
	0xc7, 0xb3, 0x1f, 0x9f, 0x72, 0x8b, 0x46, 0xcd, 0x9c, 0xf0, 0x0f, 0xb4, 0x75, 0xb2, 0x0f, 0xa5,
	0x7d, 0xdc, 0xb0, 0xff, 0xae, 0xb8, 0x82, 0x15, 0x97, 0x1a, 0x8b, 0x99, 0x8a, 0xe6, 0x7b, 0xee,
	0x7c, 0x50, 0x65, 0x5f, 0x41, 0xfe, 0x29, 0x93, 0xa4, 0x95, 0xcd, 0xbd, 0x6a, 0x79, 0xaf, 0xad,
	0xae, 0x63, 0x75, 0x42, 0x66, 0xaa, 0x13, 0x1b, 0x0a, 0x6a, 0x0f, 0xc8, 0x5a, 0x36, 0xf3, 0xca,
	0x7d, 0x6f, 0x18, 0x7f, 0x92, 0xc4, 0xcb, 0x63, 0xd4, 0xb1, 0xd1, 0x02, 0x99, 0xcb, 0x34, 0x8a,
	0xc8, 0x1b, 0x28, 0x3d, 0x62, 0x1e, 0x93, 0xec, 0x9f, 0x46, 0x88, 0x4f, 0x5a, 0x37, 0xbd, 0x77,
	0xdd, 0xc7, 0xea, 0xde, 0xa5, 0x23, 0xac, 0xcf, 0x8c, 0xb0, 0xb5, 0x77, 0x7a, 0xde, 0xd4, 0xbe,
	0x9e, 0x37, 0xb5, 0xef, 0xe7, 0x4d, 0xed, 0xcb, 0x45, 0x53, 0x3b, 0xbd, 0x68, 0x6a, 0xaf, 0x1f,
	0x66, 0xae, 0x6c, 0xc0, 0x06, 0xfc, 0xe4, 0xc4, 0x3c, 0xe0, 0x01, 0xf5, 0x3a, 0xe1, 0x50, 0xbc,
	0x65, 0xb6, 0x34, 0xfb, 0xd4, 0x1e, 0xb0, 0xc0, 0x31, 0x5d, 0xd1, 0x09, 0xfb, 0xf2, 0x38, 0x64,
	0xd9, 0xb3, 0xdd, 0x2f, 0x61, 0xfb, 0xfb, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x1b, 0xa8, 0xad,
	0xfe, 0xd8, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BillServiceClient is the client API for BillService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BillServiceClient interface {
	Create(ctx context.Context, in *BookedRoom, opts ...grpc.CallOption) (*BookedRoom, error)
	Update(ctx context.Context, in *BookedRoom, opts ...grpc.CallOption) (*BookedRoom, error)
	Get(ctx context.Context, in *OneBookedRoomRequest, opts ...grpc.CallOption) (*BookedRoom, error)
	List(ctx context.Context, in *ListBookedRoomRequest, opts ...grpc.CallOption) (*ListBookedRoomResponse, error)
	Delete(ctx context.Context, in *OneBookedRoomRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type billServiceClient struct {
	cc *grpc.ClientConn
}

func NewBillServiceClient(cc *grpc.ClientConn) BillServiceClient {
	return &billServiceClient{cc}
}

func (c *billServiceClient) Create(ctx context.Context, in *BookedRoom, opts ...grpc.CallOption) (*BookedRoom, error) {
	out := new(BookedRoom)
	err := c.cc.Invoke(ctx, "/bookedroom.BillService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billServiceClient) Update(ctx context.Context, in *BookedRoom, opts ...grpc.CallOption) (*BookedRoom, error) {
	out := new(BookedRoom)
	err := c.cc.Invoke(ctx, "/bookedroom.BillService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billServiceClient) Get(ctx context.Context, in *OneBookedRoomRequest, opts ...grpc.CallOption) (*BookedRoom, error) {
	out := new(BookedRoom)
	err := c.cc.Invoke(ctx, "/bookedroom.BillService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billServiceClient) List(ctx context.Context, in *ListBookedRoomRequest, opts ...grpc.CallOption) (*ListBookedRoomResponse, error) {
	out := new(ListBookedRoomResponse)
	err := c.cc.Invoke(ctx, "/bookedroom.BillService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billServiceClient) Delete(ctx context.Context, in *OneBookedRoomRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/bookedroom.BillService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BillServiceServer is the server API for BillService service.
type BillServiceServer interface {
	Create(context.Context, *BookedRoom) (*BookedRoom, error)
	Update(context.Context, *BookedRoom) (*BookedRoom, error)
	Get(context.Context, *OneBookedRoomRequest) (*BookedRoom, error)
	List(context.Context, *ListBookedRoomRequest) (*ListBookedRoomResponse, error)
	Delete(context.Context, *OneBookedRoomRequest) (*types.Empty, error)
}

// UnimplementedBillServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBillServiceServer struct {
}

func (*UnimplementedBillServiceServer) Create(ctx context.Context, req *BookedRoom) (*BookedRoom, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedBillServiceServer) Update(ctx context.Context, req *BookedRoom) (*BookedRoom, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedBillServiceServer) Get(ctx context.Context, req *OneBookedRoomRequest) (*BookedRoom, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedBillServiceServer) List(ctx context.Context, req *ListBookedRoomRequest) (*ListBookedRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedBillServiceServer) Delete(ctx context.Context, req *OneBookedRoomRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterBillServiceServer(s *grpc.Server, srv BillServiceServer) {
	s.RegisterService(&_BillService_serviceDesc, srv)
}

func _BillService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookedRoom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookedroom.BillService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillServiceServer).Create(ctx, req.(*BookedRoom))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookedRoom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookedroom.BillService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillServiceServer).Update(ctx, req.(*BookedRoom))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OneBookedRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookedroom.BillService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillServiceServer).Get(ctx, req.(*OneBookedRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBookedRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookedroom.BillService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillServiceServer).List(ctx, req.(*ListBookedRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OneBookedRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookedroom.BillService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillServiceServer).Delete(ctx, req.(*OneBookedRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BillService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bookedroom.BillService",
	HandlerType: (*BillServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _BillService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _BillService_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _BillService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _BillService_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _BillService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "booked-room/booked-room.proto",
}

func (m *BookedRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BookedRoom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BookedRoom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintBookedRoom(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintBookedRoom(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.RoomId) > 0 {
		i -= len(m.RoomId)
		copy(dAtA[i:], m.RoomId)
		i = encodeVarintBookedRoom(dAtA, i, uint64(len(m.RoomId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.BookingId) > 0 {
		i -= len(m.BookingId)
		copy(dAtA[i:], m.BookingId)
		i = encodeVarintBookedRoom(dAtA, i, uint64(len(m.BookingId)))
		i--
		dAtA[i] = 0x3a
	}
	if m.IsCheckin {
		i--
		if m.IsCheckin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Discount != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Discount))))
		i--
		dAtA[i] = 0x2d
	}
	if m.Price != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Price))))
		i--
		dAtA[i] = 0x25
	}
	if len(m.Checkout) > 0 {
		i -= len(m.Checkout)
		copy(dAtA[i:], m.Checkout)
		i = encodeVarintBookedRoom(dAtA, i, uint64(len(m.Checkout)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Checkin) > 0 {
		i -= len(m.Checkin)
		copy(dAtA[i:], m.Checkin)
		i = encodeVarintBookedRoom(dAtA, i, uint64(len(m.Checkin)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBookedRoom(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OneBookedRoomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OneBookedRoomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OneBookedRoomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBookedRoom(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListBookedRoomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListBookedRoomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListBookedRoomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SearchValue) > 0 {
		i -= len(m.SearchValue)
		copy(dAtA[i:], m.SearchValue)
		i = encodeVarintBookedRoom(dAtA, i, uint64(len(m.SearchValue)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.SearchField) > 0 {
		i -= len(m.SearchField)
		copy(dAtA[i:], m.SearchField)
		i = encodeVarintBookedRoom(dAtA, i, uint64(len(m.SearchField)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CreatedAtMax) > 0 {
		i -= len(m.CreatedAtMax)
		copy(dAtA[i:], m.CreatedAtMax)
		i = encodeVarintBookedRoom(dAtA, i, uint64(len(m.CreatedAtMax)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CreatedAtMin) > 0 {
		i -= len(m.CreatedAtMin)
		copy(dAtA[i:], m.CreatedAtMin)
		i = encodeVarintBookedRoom(dAtA, i, uint64(len(m.CreatedAtMin)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Limit != 0 {
		i = encodeVarintBookedRoom(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x20
	}
	if m.Page != 0 {
		i = encodeVarintBookedRoom(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x18
	}
	return len(dAtA) - i, nil
}

func (m *ListBookedRoomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListBookedRoomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListBookedRoomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SearchValue) > 0 {
		i -= len(m.SearchValue)
		copy(dAtA[i:], m.SearchValue)
		i = encodeVarintBookedRoom(dAtA, i, uint64(len(m.SearchValue)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SearchField) > 0 {
		i -= len(m.SearchField)
		copy(dAtA[i:], m.SearchField)
		i = encodeVarintBookedRoom(dAtA, i, uint64(len(m.SearchField)))
		i--
		dAtA[i] = 0x32
	}
	if m.Limit != 0 {
		i = encodeVarintBookedRoom(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x28
	}
	if m.Page != 0 {
		i = encodeVarintBookedRoom(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x20
	}
	if m.TotalCount != 0 {
		i = encodeVarintBookedRoom(dAtA, i, uint64(m.TotalCount))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxPage != 0 {
		i = encodeVarintBookedRoom(dAtA, i, uint64(m.MaxPage))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBookedRoom(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintBookedRoom(dAtA []byte, offset int, v uint64) int {
	offset -= sovBookedRoom(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BookedRoom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBookedRoom(uint64(l))
	}
	l = len(m.Checkin)
	if l > 0 {
		n += 1 + l + sovBookedRoom(uint64(l))
	}
	l = len(m.Checkout)
	if l > 0 {
		n += 1 + l + sovBookedRoom(uint64(l))
	}
	if m.Price != 0 {
		n += 5
	}
	if m.Discount != 0 {
		n += 5
	}
	if m.IsCheckin {
		n += 2
	}
	l = len(m.BookingId)
	if l > 0 {
		n += 1 + l + sovBookedRoom(uint64(l))
	}
	l = len(m.RoomId)
	if l > 0 {
		n += 1 + l + sovBookedRoom(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 2 + l + sovBookedRoom(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 2 + l + sovBookedRoom(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OneBookedRoomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBookedRoom(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListBookedRoomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovBookedRoom(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovBookedRoom(uint64(m.Limit))
	}
	l = len(m.CreatedAtMin)
	if l > 0 {
		n += 1 + l + sovBookedRoom(uint64(l))
	}
	l = len(m.CreatedAtMax)
	if l > 0 {
		n += 1 + l + sovBookedRoom(uint64(l))
	}
	l = len(m.SearchField)
	if l > 0 {
		n += 1 + l + sovBookedRoom(uint64(l))
	}
	l = len(m.SearchValue)
	if l > 0 {
		n += 1 + l + sovBookedRoom(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListBookedRoomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovBookedRoom(uint64(l))
		}
	}
	if m.MaxPage != 0 {
		n += 1 + sovBookedRoom(uint64(m.MaxPage))
	}
	if m.TotalCount != 0 {
		n += 1 + sovBookedRoom(uint64(m.TotalCount))
	}
	if m.Page != 0 {
		n += 1 + sovBookedRoom(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovBookedRoom(uint64(m.Limit))
	}
	l = len(m.SearchField)
	if l > 0 {
		n += 1 + l + sovBookedRoom(uint64(l))
	}
	l = len(m.SearchValue)
	if l > 0 {
		n += 1 + l + sovBookedRoom(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBookedRoom(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBookedRoom(x uint64) (n int) {
	return sovBookedRoom(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BookedRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookedRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BookedRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BookedRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookedRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookedRoom
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checkin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookedRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookedRoom
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checkin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checkout", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookedRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookedRoom
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checkout = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Price = float32(math.Float32frombits(v))
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Discount", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Discount = float32(math.Float32frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCheckin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCheckin = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookedRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookedRoom
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookedRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookedRoom
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookedRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookedRoom
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookedRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookedRoom
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookedRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookedRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OneBookedRoomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookedRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OneBookedRoomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OneBookedRoomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookedRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookedRoom
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookedRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookedRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListBookedRoomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookedRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListBookedRoomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListBookedRoomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAtMin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookedRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookedRoom
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAtMin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAtMax", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookedRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookedRoom
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAtMax = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchField", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookedRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookedRoom
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SearchField = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookedRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookedRoom
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SearchValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookedRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookedRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListBookedRoomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookedRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListBookedRoomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListBookedRoomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBookedRoom
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBookedRoom
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &BookedRoom{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPage", wireType)
			}
			m.MaxPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPage |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchField", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookedRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookedRoom
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SearchField = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookedRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookedRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookedRoom
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SearchValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookedRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookedRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBookedRoom(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBookedRoom
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBookedRoom
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBookedRoom
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBookedRoom
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBookedRoom
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBookedRoom
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBookedRoom        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBookedRoom          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBookedRoom = fmt.Errorf("proto: unexpected end of group")
)
